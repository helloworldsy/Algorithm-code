// 通过BFS寻找矩阵中相邻元素为1的块数
#include<cstdio>
#include<iostream>
#include<cstring>
#include<stdlib.h>
#include<algorithm>
#include<cmath>
#include<time.h>
#include<vector>
#include<set>
#include<string>
#include<map>
#include<stack>
#include<queue>
#include<utility>
using namespace std;
int const maxn=100;
struct node{
    int x,y;
}Node;
int n,m;
int matrix[maxn][maxn];
bool inqueue[maxn][maxn]={false};
int X[4]={0,0,1,-1};
int Y[4]={1,-1,0,0};
bool judge(int x,int y){
    if(x>=n||x<0||y>=m||y<0) return false;
    if(matrix[x][y]==0||inqueue[x][y]==true) return false;
    return true;
}
void BFS(int x,int y){
    queue<node> Q;
    Node.x=x,Node.y=y;
    Q.push(Node);
    inqueue[x][y]=true;
    while(!Q.empty()){
        node top=Q.front();
        Q.pop();
        for(int i=0;i<4;i++){
            int newX=top.x+X[i];
            int newY=top.y+Y[i];
            if(judge(newX,newY)){
                Node.x=newX;
                Node.y=newY;
                Q.push(Node);
                inqueue[newX][newY]=true;
            }
        }
    }
}
int main(){
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            scanf("%d",&matrix[i][j]);
    int ans=0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(matrix[i][j]==1&&inqueue[i][j]==false){
                inqueue[i][j]=true;
                ans++;
                BFS(i,j);
            }
        }
    }
    printf("%d",ans);
    return 0;
}





//BFS求迷宫最短路径
#include<cstdio>
#include<iostream>
#include<cstring>
#include<stdlib.h>
#include<algorithm>
#include<cmath>
#include<time.h>
#include<vector>
#include<set>
#include<string>
#include<map>
#include<stack>
#include<queue>
#include<utility>
using namespace std;
int const maxn=100;
struct node{
    int x,y;
    int step;
}S,T,Node;
int n,m;
char maze[maxn][maxn];
bool inqueue[maxn][maxn]={false};
int X[4]={0,0,1,-1};
int Y[4]={1,-1,0,0};
bool test(int x,int y){
    if(x>=n||x<0||y>=m||y<0) return false;
    if(maze[x][y]=='*') return false;
    if(inqueue[x][y]==true) return false;
    return true;
}
int BFS(){
    queue<node> q;
    q.push(S);
    while(!q.empty()){
        node top=q.front();
        q.pop();
        if(top.x==T.x&&top.y==T.y){
            return top.step;
        }
        for(int i=0;i<4;i++){
            int newX=top.x+X[i];
            int newY=top.y+Y[i];
            if(test(newX,newY)){
                Node.x=newX;
                Node.y=newY;
                Node.step=top.step+1;
                q.push(Node);
                inqueue[newX][newY]=true;
            }
        }
    }
    return -1;
}
int main(){
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++){
        getchar();
        for(int j=0;j<m;j++){
            maze[i][j]=getchar();
        }
        maze[i][m+1]='\0';
    }
    scanf("%d%d%d%d",&S.x,&S.y,&T.x,&T.y);
    S.step=0;
    printf("%d\n",BFS());
    return 0;
}
