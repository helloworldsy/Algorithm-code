#include<cstdio>
#include<iostream>
#include<cstring>
#include<stdlib.h>
#include<algorithm>
#include<cmath>
#include<time.h>
#include<vector>
#include<set>
#include<string>
#include<map>
#include<stack>
#include<queue>
#include<utility>
using namespace std;
//binary search tree
struct node{
    int data;
    node* leftChild;
    node* rightChild;
};
node* newnode(int x){
    node* Node=new node;
    Node->data=x;
    Node->leftChild=NULL;
    Node->rightChild=NULL;
    return Node;
}
void Search(node* root,int x){
    if(root==NULL){
        printf("search failed\n");
        return;
    }
    if(root->data==x){
        printf("%d",root->data);
    }
    else if(x<root->data){
        Search(root->leftChild,x);
    }
    else{
        Search(root->rightChild,x);
    }
}
void Insert(node* &root,int x){
    if(root==NULL){
        root=newnode(x);
        return;
    }
    if(root->data==x){
        return;
    }else if(x<root->data){
        Insert(root->leftChild,x);
    }else{
        Insert(root->rightChild,x);
    }
}
node* Create(int data[],int n){
    node* root=NULL;
    for(int i=0;i<n;i++){
        Insert(root,data[i]);
    }
    return root;
}
node* findMax(node* root){
    while(root->rightChild!=NULL){
        root=root->rightChild;
    }
    return root;
}
node* findMin(node* root){
    while(root->leftChild!=NULL){
        root=root->leftChild;
    }
    return root;
}
void deleteNode(node* &root,int x){
    if(root==NULL) return;
    if(root.data==x){
        if(root->leftChild==NULL&&root->rightChild==NULL){
            root=NULL;
        }else if(root->leftChild!=NULL){
            node* pre=findMax(root.leftChild);
            root->data=pre->data;
            deleteNode(root->leftChild,pre->data);
        }else{
            node* next=findMin(root->rightChild);
            root->data=next->data;
            deleteNode(root->rightchild,next->data);
        }
    }else if(root->data>x){
        deleteNode(root->leftChild,x);
    }else{
        deleteNode(root->rightChild,x);
    }
}
