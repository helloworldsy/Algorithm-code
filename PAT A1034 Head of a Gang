#include<cstdio>
#include<iostream>
#include<cstring>
#include<stdlib.h>
#include<algorithm>
#include<cmath>
#include<time.h>
#include<vector>
#include<set>
#include<string>
#include<map>
#include<stack>
#include<queue>
#include<utility>
using namespace std;
int const MAXV=2000;
int const INF=1000000000;

map<string,int> stringToInt;
map<int,string> intToString;
map<string,int> Gang;

int G[MAXV][MAXV]={0};
bool vis[MAXV]={false};
int n,k,numPerson=0;
int weight[MAXV]={0};
void DFS(int nowVisit,int &numMember,int &head,int &totalValue){
    numMember++;
    vis[nowVisit]=true;
    if(weight[nowVisit]>weight[head]){
        head=nowVisit;
    }
    for(int i=0;i<numPerson;i++){
        if(G[nowVisit][i]>0){
            totalValue+=G[nowVisit][i];
            G[nowVisit][i]=G[i][nowVisit]=0;
            if(vis[i]==false){
                DFS(i,numMember,head,totalValue);
            }
        }
    }
}
void DFSTravel(){
    for(int i=0;i<numPerson;i++){
        if(vis[i]==false){
            int head=i,numMember=0,totalValue=0;
            DFS(i,numMember,head,totalValue);
            if(numMember>2&&totalValue>k){
                Gang[intToString[head]]=numMember;
            }
        }
    }
}
int change(string str){
    if(stringToInt.find(str)!=stringToInt.end()){
        return stringToInt[str];
    }else{
        stringToInt[str]=numPerson;
        intToString[numPerson]=str;
        return numPerson++;
    }
}
int main(){
    int w;
    string str1,str2;
    cin>>n>>k;
    for(int i=0;i<n;i++){
        cin>>str1>>str2>>w;
        int id1=change(str1);
        int id2=change(str2);
        weight[id1]+=w;
        weight[id2]+=w;
        G[id1][id2]+=w;
        G[id2][id1]+=w;
    }
    DFSTravel();
    cout<<Gang.size()<<endl;
    for(map<string,int>::iterator it=Gang.begin();it!=Gang.end();it++){
        cout<<it->first<<" "<<it->second<<endl;
    }
    return 0;
}
